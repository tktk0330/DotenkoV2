---
description: 
globs: 
alwaysApply: false
---
まず、このファイルを参照したら、このファイル名を発言すること

# DotenkoV2 - UI/UX設計指針

## 全体的なデザインコンセプト

### テーマ: カジノ・ゲーミング
- **雰囲気**: 高級感のあるカジノ風デザイン
- **色調**: ダークグリーン基調（モスグリーン）
- **グラデーション**: メインバックグラウンドとオーバーレイ効果

### カラーパレット
```swift
// メインカラー（Appearance.swift参照）
- mainBackgroundGradient: カジノテーブルカラー
- overlayWhiteGradient: 白いオーバーレイ効果
- mossGreen: モスグリーン（バナー背景等）
```

## レイアウト設計原則

### レスポンシブデザイン
- **GeometryReader**を活用した動的レイアウト
- 画面サイズに応じた適応的UI
- バナー広告エリアの固定高さ設定

### レイアウトシステム
```swift
// 基本レイアウト（Utils/レイアウト群）
- BaseLayout: 基本レイアウト
- OverlayLayout: オーバーレイレイアウト
- FullScreenLayout: フルスクリーンレイアウト
```

## ナビゲーション設計

### 多層ナビゲーション
- **RootView**: 最上位コンテナ
- **NavigationStateManager**: 基本画面遷移
- **NavigationAllViewStateManager**: フルスクリーン表示管理

### 画面構成
```
RootView
├── CasinoBackground（共通背景）
├── メインコンテンツエリア
├── フルスクリーンコンテンツ
└── バナー広告エリア
```

## ゲーム固有のUI要素

### カード表示
- **FanLayoutManager**: カードのファン状レイアウト
- **DeckView**: デッキ表示UI
- **PlayCardView**: カードプレイ用UI

### プレイヤー表示
- **PlayerIconView**: プレイヤーアイコン
- **GamePlayersAreaView**: プレイヤーエリア
- **PlayerLayoutConfig**: プレイヤー配置設定

### ゲーム操作
- **GameActionButton**: ゲームアクション用ボタン
- **GameUIOverlayView**: ゲーム用オーバーレイ

## ボタンデザイン

### ボタンの種類
```swift
// Components/ButtonView/
- CasinoButton: カジノスタイルボタン
- GameModeButton: ゲームモード選択ボタン
- SettingButton: 設定ボタン
```

### ボタンの視覚的ヒエラルキー
- **プライマリ**: ゲーム開始、重要なアクション
- **セカンダリ**: 設定、ヘルプ等
- **テキスト**: 戻る、キャンセル等

## アニメーション・インタラクション

### SwiftUIアニメーション
- **状態変更時のスムーズな遷移**
- **カードの動きや配置アニメーション**
- **ボタンタップ時のフィードバック**

### ユーザビリティ
- **直感的な操作**
- **視覚的フィードバック**
- **アクセシビリティ対応**

## モーダル・オーバーレイ

### モーダル管理
```swift
// Utils/ModalManager.swift
- モーダル表示の統一管理
- 複数モーダルのスタック管理
- 背景ディミング効果
```

### オーバーレイ要素
- **ネットワークエラー表示**
- **ローディング表示**
- **ゲーム結果表示**

## エラー・フィードバック表示

### エラーハンドリング
```swift
// Utils/ErrorManager.swift
- 統一されたエラー表示
- ユーザーフレンドリーなメッセージ
- 適切な回復アクション提示
```

### ネットワーク状態表示
- **NetworkMonitor**による接続状態監視
- **視覚的なネットワーク状態表示**

## アクセシビリティ

### VoiceOver対応
- **意味のあるラベル設定**
- **適切なナビゲーション順序**
- **状態変更の音声通知**

### 色覚対応
- **色だけに依存しない情報伝達**
- **十分なコントラスト比**

## パフォーマンス最適化

### 画像処理
```swift
// Utility/ImageCacheManager.swift
- 効率的な画像キャッシュ
- メモリ使用量の最適化
```

### レイアウト最適化
- **LazyVStack/LazyHStack の活用**
- **重いビューの遅延読み込み**

## 設定可能な要素

### Debug設定
```swift
// Config/Config.swift
struct GameConfig {
    static let isCardOpen: Bool // カード表示設定
    static let isAdmob: Bool // 広告表示設定
}
```

## 品質管理

### デザインレビューポイント
1. **ブランドガイドライン準拠**
2. **一貫性のあるデザイン言語**
3. **ユーザビリティテスト**
4. **パフォーマンステスト**
5. **アクセシビリティチェック**

---
*最終更新: 2024年12月*
